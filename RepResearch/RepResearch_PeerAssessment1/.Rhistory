x[3]
x[[3]
]
class(x[[3]])
class(x[[1]])
class(x[[2]])
class(x[[3]])
rm(x)
x <- c(69, 69, 65, 72, 50, 57, 58, 50, 56, 42)
mean(x)
sumary(x)
summary(x)
std()
sd()
?sd
sd(x)
mean(x) - sd(x)
library(datasets)
data(iris)
tapply(iris$Sepal.Length, iris$species, mean)
str(iris)
tapply(iris$Sepal.Length, iris$Species, mean)
rm(list=ls())
setwd("~/")
setwd("~/")
x <- c(39, 67, 74, 70, 43, 52, 68, 38, 64, 73)
summary(x)
sd(x)
sdp
psd
sd
count
str(x)
dim(x)
length(x)
sd(x) * sqrt((length(x)-1)/length(x))
message("a")
rm(list=ls())
library("swirl")
data()
library("datasets")
load("iris")
iris()
iris
x <- iris
x
rm(x)
install(RMongo)
install.packages("RMongo")
library("rJava")
rJava
library("RMongo")
?RMongo
?rJava
install.packages("quantmod")
library("quantmod")
getSymbol("AAPL")
getSymbols("AAPL")
AAPL
head("AAPL")
class("AAPL")
str("AAPL
")
barChart(AAPL)
AAPL[2]
tail(AAPL)
summary(AAPL)
as.list(APPL)
as.list(AAPL)
install.package("twitterR")
install.packages("twitterR")
install.packages("twitteR")
install.packages("twitteR")
rm(list=ls())
library("twiteeR")
library("twitteR")
library("RMongo")
?twitteR
install.packages("Quandl")
library("Quandl")
?Quandl
install.packages("rdatamarket")
install.packages("rga")
install.packages("RGA")
install.packages("RGoogleAnalytics")
install.packages("ganalytics")
library
?library
library()
rmongo()
RMongo()
install.packages("RMongo")
install.packages("RMongo")
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
load("iris")
?iris
iris <- iris
str(iris)
library("quantmod", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
getSymbols("AAPL")
str(AAPL)
head(AAPL)
getSymbols.yahoo
getSymbols.yahoo(AAPL)
getSymbols.yahoo("AAPL")
getSymbol("AAPL",src='yahoo')
getSymbols("AAPL",src='yahoo')
getSymbols(AAPL,src='yahoo')
getSymbols("AAPL",src='yahoo')
rm(AAPL)
getSymbols("AAPL",src='yahoo')
summary(AAPL)
getSymbols("AAPL")
summary(AAPL)
rm(list=ls()
)
set.seed(1)
rpois(5,2)
rpois(5,2)
set.seed(1)
rpois(5,2)
rpois(5,2)
set.seed(10)
x <- rep(0:1, each=5)
e <- rnorm(10,0,20)
y <- 0.5 + 2 * x + e
plot(x,y)
load("~/Desktop/datasciencecoursera/GetData/Quiz_2/.RData")
github_token
source("/Users/abrewer/Desktop/RepData_PeerAssessment1/rcode.R")
setwd("/Users/abrewer/Desktop/RepData_PeerAssessment1")
pwd()
wd()
getwd()
read.csv(file = "./acticity.csv")
read.csv(file = "./activity.csv")
activity. data <- read.csv(file = "./activity.csv")
activity.data <- read.csv(file = "./activity.csv")
str(activity.data)
activity.data <- read.csv(file = "./activity.csv", colClasses = c("numeric", "Date", "numeric"))
str(activity.data)
head(activity.data)
activity.data <- read.csv(file = "./activity.csv", colClasses = c("numeric", "Date", "numeric"))
q()
if (!require(dplyr)) { installed.packages("dplyr") }
if (!require(ggplot2)) { installed.packages("ggplot2") }
## Read the data
activity.data <- read.csv(file = "./activity.csv", colClasses = c("numeric", "Date", "numeric"))
## Output the summary of the steps variable
summary(activity.data[1])
## Add a new row of POSIXct class with the date and time information of each reading
activity.data <- tbl_df(activity.data)
mutate(activity.data, timestamp = paste(date, interval, sep = " "))
## Read the data
activity.data <- read.csv(file = "./activity.csv", colClasses = c("numeric", "Date", "numeric"))
## Output the summary of the steps variable
summary(activity.data[1])
## Add a new row of POSIXct class with the date and time information of each reading
activity.data <- tbl_df(activity.data)
activity.data <- mutate(activity.data, timestamp = paste(date, interval, sep = " "))
summary(activity.data)
## Output the summary of the dataset
if (!require(dplyr)) { install.packages("dplyr") }
if (!require(ggplot2)) { install.packages("ggplot2") }
if (!require(lubridate)) { install.packages("lubridate") }
## Read the data
activity.data <- read.csv(file = "./activity.csv", colClasses = c("numeric", "Date", "numeric"))
activity.data <- tbl_df(activity.data)
## Output the summary of the dataset
summary(activity.data)
head(activity.data)
class(activity.data[2,2])
activity.data[2,2]
activity.data[2,2][1]
activity.data[2,2][[1]
]
activity.data[2,2][[1]]
class(activity.data[2,2][[1]])
activity.data
activity.data <- group_by(activity.data, date)
activity.data
summarise(activity.data, sum())
summarise(activity.data, sum(steps))
summarise(activity.data, sum(steps, na.rm = TRUE))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
step.summary <- summarise(activity.data.date, sum(steps, na.rm = TRUE))
names(step.summary) <- c("date", "steps")
step.summary
names(step.summary) <- c("day", "steps")
print(step.summary)
source('~/.active-rstudio-document', echo=TRUE)
histogram <- ggplot(step.summary, aes(x = step))
histogram + geom_histogram()
histogram <- ggplot(step.summary, aes(x = step))
histogram + geom_histogram()
summary(step.data)
summary(step.summaryummary)
summary(step.summary)
histogram <- ggplot(step.summary, aes(x = step))
histogram + geom_histogram(binwidth = 1000)
histogram <- ggplot(step.summary, aes(x = steps))
histogram + geom_histogram(binwidth = 1000)
qplot(x = steps, data = step.summary)
histogram <- ggplot(step.summary, aes(x = steps))
histogram <- histogram + geom_histogram(binwidth = 1000)
print(histogram)
histogram <- ggplot(step.summary, aes(x = steps))
histogram <- histogram + geom_histogram(binwidth = 1000, color = "black", fill = "red")
histogram <- histogram + labs(title = "Steps Histogram", x = "Steps", y = "Count")
print(histogram)
histogram <- ggplot(step.summary, aes(x = steps))
histogram <- histogram + geom_histogram(binwidth = 1000, color = "black", fill = "stellblue")
histogram <- histogram + labs(title = "Steps Histogram", x = "Steps", y = "Count")
print(histogram)
histogram <- ggplot(step.summary, aes(x = steps))
histogram <- histogram + geom_histogram(binwidth = 1000, color = "black", fill = "blue")
histogram <- histogram + labs(title = "Steps Histogram", x = "Steps", y = "Count")
print(histogram)
histogram <- ggplot(step.summary, aes(x = steps))
histogram <- histogram + geom_histogram(binwidth = 1000, color = "black", fill = "blue")
histogram <- histogram + labs(title = "Steps Histogram", x = "Steps", y = "Count")
print(histogram)
histogram <- ggplot(step.summary, aes(x = steps))
histogram <- histogram + geom_histogram(binwidth = 1000, color = "black", fill = "gray")
histogram <- histogram + labs(title = "Steps Histogram", x = "Steps", y = "Count")
print(histogram)
expression(PM[2.5])
expression("log " * PM[2.5])
summary
summary(step.summary)
mean(step.summary)
median(step.summary)
## I use the summary function
mean(step.summary, na.rm = TRUE)
median(step.summary, na.rm = TRUE)
## I use the summary function
mean(step.summary$steps, na.rm = TRUE)
median(step.summary$steps, na.rm = TRUE)
activity.data
activity.data.interval <- group_by(activity.data, interval)
interval.summary <- summarise(activity.data.interval, mean(steps, na.rm = TRUE))
names(interval.summary) <- c("interval","average_steps")
interval.summary
## Group and summerize the data by interval
activity.data.interval <- group_by(activity.data, interval)
interval.summary <- summarise(activity.data.interval, mean(steps, na.rm = TRUE))
names(interval.summary) <- c("interval","average_steps")
## Make and print the plot
plot2 <- ggplot(interval.summary, aes(x = interval, y = average_steps))
plot2 <- plot2 + geom_line(color = "red")
plot2 <- plot2 + labs(title = "Interval vs Average No of Steps", x = "Intervals", y = "Average No of Steps")
print(plot2)
## Group and summerize the data by interval
activity.data.interval <- group_by(activity.data, interval)
interval.summary <- summarise(activity.data.interval, mean(steps, na.rm = TRUE))
names(interval.summary) <- c("interval","average_steps")
## Make and print the plot
plot2 <- ggplot(interval.summary, aes(x = interval, y = average_steps))
plot2 <- plot2 + geom_line(size = 2, color = "steelblue")
plot2 <- plot2 + labs(title = "Interval vs Average No of Steps", x = "Intervals", y = "Average No of Steps")
print(plot2)
## Group and summerize the data by interval
activity.data.interval <- group_by(activity.data, interval)
interval.summary <- summarise(activity.data.interval, mean(steps, na.rm = TRUE))
names(interval.summary) <- c("interval","average_steps")
## Make and print the plot
plot2 <- ggplot(interval.summary, aes(x = interval, y = average_steps))
plot2 <- plot2 + geom_line(size = 1.5, color = "steelblue")
plot2 <- plot2 + labs(title = "Interval vs Average No of Steps", x = "Intervals", y = "Average No of Steps")
print(plot2)
## Group and summerize the data by interval
activity.data.interval <- group_by(activity.data, interval)
interval.summary <- summarise(activity.data.interval, mean(steps, na.rm = TRUE))
names(interval.summary) <- c("interval","average_steps")
## Make and print the plot
plot2 <- ggplot(interval.summary, aes(x = interval, y = average_steps))
plot2 <- plot2 + geom_line(size = 1, color = "steelblue")
plot2 <- plot2 + labs(title = "Interval vs Average No of Steps", x = "Intervals", y = "Average No of Steps")
print(plot2)
source('~/.active-rstudio-document', echo=TRUE)
rm(histogram)
dev.cur()
plot1
plot2
max(interval.summary$average_steps)
filter(interval.summary, average_steps = 206)
max.steps <- max(interval.summary$average_steps)
filter(interval.summary, average_steps == max.steps)
filter(interval.summary, average_steps == max.steps)[1]
activity.data
max.steps <- max(interval.summary$average_steps)
filter(interval.summary, average_steps == max.setps)[1]
max.steps <- max(interval.summary$average_steps)
filter(interval.summary, average_steps == max.steps)[1]
complete.cases(activity.data)
sum(!complete.cases(activity.data))
weekdays(activity.data$date)
sum(!complete.cases(activity.data))
filter(interval.summary, average_steps == max.steps)[1]
mean(step.summary$steps, na.rm = TRUE)
m <- mean(step.summary$steps, na.rm = TRUE)
list(m, )
list(mean = m)
list(mean = mean(step.summary$steps, na.rm = TRUE))
list(median = median(step.summary$steps, na.rm = TRUE))
list("Mean Steps per Day" = mean(step.summary$steps, na.rm = TRUE))
## I use the mean and median function to calculate and report the mean and median from the summary table.
list("Average Steps per Day" = mean(step.summary$steps, na.rm = TRUE))
list("Median Steps per Day" = median(step.summary$steps, na.rm = TRUE))
sum(interval.summary$average_steps)
rm(list=ls())
source('~/.active-rstudio-document', echo=TRUE)
interval.summary
interval.summary.median
filter(interval.summary.median, interval == 835)
filter(interval.summary, interval == 835)
max(interval.summary.median$median_steps)
filter(interval.summary, median_steps == 60)
filter(interval.summary.median, median_steps == 60)
filter(interval.summary, interval == 845)
which(complete.cases(activity.data))
which(!complete.cases(activity.data))
list("Incomplete Cases" = sum(!complete.cases(activity.data)))
incomp.cases <- which(!complete.cases(activity.data))
incomp.cases[2034]
?for
help.serch("for loop")
help.search("for loop")
help.search("for")
int <- activity.data[1,3]
int
int <- activity.data[1,3][[1]]
int
filter(interval.summary.median, interval == int)
filter(interval.summary.median, interval == int)[[2]]
int <- activity.data$interval[1]
int <- activity.data$interval[10]
int <- activity.data$interval
int <- activity.data$interval[incomp.cases[1304]]
int <- activity.data$interval[incomp.cases[2304]]
activity.data[,17298]
activity.data[17298,]
int <- activity.data$interval[17298]
int <- activity.data$interval[incomp.cases[2304]]
incomp.cases[2304]
int <- activity.data$interval[17568]
activity.data[17568,]
val <- filter(internal.summary.median, interval == int)[[2]]
val <- filter(interval.summary.median, interval == int)[[2]]
val
interval.summary.median <- summarise(activity.data.interval, median(steps, na.rm = TRUE))
names(interval.summary.median) <- c("interval","median_steps")
incomp.cases <- which(!complete.cases(activity.data))
activity.data.comp <- activity.data
activity.data.comp
int <- 0
val <- filter(interval.summary.median, interval == int)[[2]]
activity.data.comp[i,1] <- val
activity.data.comp[1,1] <- val
activity.data.comp
activity.data.comp$steps[1] <- val
activity.data.comp$steps[1] <- 5
activity.data.comp
activity.data.comp$steps[1] <- val
activity.data.comp
summary(activity.data)
summary(summary(activity.data))
names(summary(activity.data))
str(summary(activity.data))
summary(activity.data)[7,1]
rm(list=ls())
source('~/.active-rstudio-document', echo=TRUE)
rm(list=ls())
source('~/.active-rstudio-document', echo=TRUE)
weekdays(activity.data.comp$date)[1]
weekdays(activity.data.comp$date)[1:40]
weekdays(activity.data.comp$date)[1:200]
weekdays(activity.data.comp$date)
weekdays(activity.data.comp$date)[9792]
weekdays(activity.data.comp$date)[9793]
weekdays(activity.data.comp$date)[1] == "Sunday" | "Monday"
any(weekdays(activity.data.comp$date)[1] == "Sunday" | "Monday")
any(weekdays(activity.data.comp$date)[1] == "Sunday")
any(weekdays(activity.data.comp$date)[1] == "Monday")
any(weekdays(activity.data.comp$date)[1] == ("Monday" | "Sunday"))
grep(weekdays(activity.data.comp$date)[1], c("Monday", "Sunday"))
grep(weekdays(activity.data.comp$date)[1], c("Saturday", "Sunday"))
grep(weekdays(activity.data.comp$date)[1], c("Saturday", "Sunday"))
grep(weekdays(activity.data.comp$date)[1000], c("Saturday", "Sunday"))
grep(weekdays(activity.data.comp$date)[900], c("Saturday", "Sunday"))
grep(weekdays(activity.data.comp$date)[800], c("Saturday", "Sunday"))
grep(weekdays(activity.data.comp$date)[700], c("Saturday", "Sunday"))
grep(weekdays(activity.data.comp$date)[600], c("Saturday", "Sunday"))
grep(weekdays(activity.data.comp$date)[1800], c("Saturday", "Sunday"))
dia <- grep(weekdays(activity.data.comp$date)[1800], c("Saturday", "Sunday"))
sub(2, "Sunday")
sub("2", "Sunday")
sub(dia ,"2", "Sunday")
sub(dia ,"1", "Sunday")
dia
sub(dia , 2, "Sunday")
sub(dia , 1, "Sunday")
sub(2, "Sunday, dia")
sub(2, "Sunday", dia)
sub(1, "Sunday", dia)
sub(7, "Sunday", dia)
weekday
weekday()
weekdays()
sub(1:2, "Sunday", dia)
activity.data.comp <- mutate(activity.data.comp, Weekday = grep(weekdays(activity.data.comp$date), c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")))
activity.data.comp
sum(activity.data.comp$Weekday)
library(chron)
source('~/.active-rstudio-document', echo=TRUE)
activity.data.comp
activity.data.comp <- mutate(activity.data.comp, Weekend = grepl("Saturday|Sunday", Weekday)
)
activity.data.comp
activity.data.comp[1800,]
activity.data.comp[1700,]
activity.data.comp[1600,]
activity.data.comp[1500,]
activity.data.comp[1400,]
source('~/.active-rstudio-document', echo=TRUE)
activity.data.comp
activity.data.comp[1400,]
activity.data.comp[1700,]
activity.data.comp[1800,]
activity.data.comp[1600,]
activity.data.comp[1500,]
source('~/.active-rstudio-document', echo=TRUE)
ifelse(TRUE, "weekend", "weekday")
ifelse(c(TRUE, FALSE, TRUE, TRUE) , "weekend", "weekday")
activity.data.comp <- mutate(activity.data.comp, Weekday = grepl("Saturday|Sunday", weekdays(date)), "weekend")
activity.data.comp
source('~/.active-rstudio-document', echo=TRUE)
activity.data.comp
activity.data.comp[1800,]
activity.data.comp[1400,]
activity.data.comp[1500,]
source('~/.active-rstudio-document', echo=TRUE)
activity.data.comp
source('~/.active-rstudio-document', echo=TRUE)
activity.data.comp
activity.data.comp[1500,]
activity.data.comp[1400,]
activity.data.comp[1800,]
str(activity.data.comp)
activity.data.comp.interval <- group_by(activity.data, interval, Weekend)
activity.data.comp.interval <- group_by(activity.data, interval, Weekend)
activity.data.comp.interval <- group_by(activity.data.comp, interval, Weekend)
activity.data.comp.interval
interval.weekend.summary.comp <- summarise(activity.data.comp.interval, mean(steps, na.rm = TRUE))
interval.weekend.summary.comp
names(interval.weekend.summary.comp) <- c("interval", "weekend", "average_steps")
interval.weekend.summary.comp
interval.summary
plot4 <- ggplot(interval.weekend.summary.comp, aes(x = interval, y = average_steps))
plot4 <- plot4 + geom_line(size = 1, color = "steelblue") + facet_grid(weekend ~ .)
plot4 <- plot4 + labs(title = "Interval vs Average No of Steps (By day of week)", x = "Intervals", y = "Average No of Steps")
print(plot4)
rm(list=ls())
source('~/.active-rstudio-document', echo=TRUE)
rm(plot4)
## Make and print the plot
plot4 <- ggplot(interval.weekend.summary.comp, aes(x = interval, y = average_steps))
plot4 <- plot4 + geom_line(size = 1, color = "steelblue") + facet_wrap(weekend ~ .)
plot4 <- plot4 + labs(title = "Interval vs Average No of Steps (By day of week)", x = "Intervals", y = "Average No of Steps")
print(plot4)
rm(list=ls())
source('~/.active-rstudio-document', echo=TRUE)
## Make and print the plot
plot4 <- ggplot(interval.weekend.summary.comp, aes(x = interval, y = average_steps))
plot4 <- plot4 + geom_line(size = 1, color = "steelblue") + facet_grid(weekend ~ .)
plot4 <- plot4 + labs(title = "Interval vs Average No of Steps (By day of week)", x = "Intervals", y = "Average No of Steps")
print(plot4)
rm(list=ls())
source('~/.active-rstudio-document', echo=TRUE)
library(knitr)
rm(lslist=ls())
rm(list=ls())
source('~/.active-rstudio-document', echo=TRUE)
rm(list=ls())
source('~/.active-rstudio-document', echo=TRUE)
dev.cur()
dev.set(4)
dev.set(1)
dev.set(2)
dev.set(3)
dev.set(4)
dev.set(6)
dev.set(3)
dev.off()
print(plot1, plot2)
print(plot1)
print(plot2)
print(plot3)
print(plot4)
dev.cur()
dev.set(3)
dev.off(3)
dev.cur()
dev.set(3)
q()
summary(activity.data)
summary(activity.data.comp)
rm(list=ls())
source('~/.active-rstudio-document', echo=TRUE)
dev.cur()
dev.off()
