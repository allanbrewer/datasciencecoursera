1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0 , times=40)
rep(c(0,1,2) , times=10)
rep(c(0,1,2) , each=10)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_char <- c(my_char,"Allan")
my_name <- c(my_char,"Allan")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world", sep = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X","Y","Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
4
swirl()
x <- c(44,NA,5,NA)
x*3
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
library(swirl)
swirl()
my_vector <- 1:20
my_vectpr
my_vector
dim(my_vector)
length)my_vector
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
args(matrix)
my_matrix2 <- matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints <- sample(10)
ints
ints > 5
which(ints>7)
any(ints<0)
all(ints>0)
x <- c(1,3L,"a")
x <- (1,3L,"a")
x <- list(1,3L,"a")
x <- c(1,3L,"a")
as.list(x)
x
x <- list(1,3L,"a")
x
class(x[1])
class(x[2])
class(x[3])
x[3]
x[[3]
]
class(x[[3]])
class(x[[1]])
class(x[[2]])
class(x[[3]])
rm(x)
x <- c(69, 69, 65, 72, 50, 57, 58, 50, 56, 42)
mean(x)
sumary(x)
summary(x)
std()
sd()
?sd
sd(x)
mean(x) - sd(x)
library(datasets)
data(iris)
tapply(iris$Sepal.Length, iris$species, mean)
str(iris)
tapply(iris$Sepal.Length, iris$Species, mean)
rm(list=ls())
setwd("~/")
setwd("~/")
x <- c(39, 67, 74, 70, 43, 52, 68, 38, 64, 73)
summary(x)
sd(x)
sdp
psd
sd
count
str(x)
dim(x)
length(x)
sd(x) * sqrt((length(x)-1)/length(x))
message("a")
rm(list=ls())
library("swirl")
data()
library("datasets")
load("iris")
iris()
iris
x <- iris
x
rm(x)
install(RMongo)
install.packages("RMongo")
library("rJava")
rJava
library("RMongo")
?RMongo
?rJava
install.packages("quantmod")
library("quantmod")
getSymbol("AAPL")
getSymbols("AAPL")
AAPL
head("AAPL")
class("AAPL")
str("AAPL
")
barChart(AAPL)
AAPL[2]
tail(AAPL)
summary(AAPL)
as.list(APPL)
as.list(AAPL)
install.package("twitterR")
install.packages("twitterR")
install.packages("twitteR")
install.packages("twitteR")
rm(list=ls())
library("twiteeR")
library("twitteR")
library("RMongo")
?twitteR
install.packages("Quandl")
library("Quandl")
?Quandl
install.packages("rdatamarket")
install.packages("rga")
install.packages("RGA")
install.packages("RGoogleAnalytics")
install.packages("ganalytics")
library
?library
library()
rmongo()
RMongo()
install.packages("RMongo")
install.packages("RMongo")
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
load("iris")
?iris
iris <- iris
str(iris)
library("quantmod", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
getSymbols("AAPL")
str(AAPL)
head(AAPL)
getSymbols.yahoo
getSymbols.yahoo(AAPL)
getSymbols.yahoo("AAPL")
getSymbol("AAPL",src='yahoo')
getSymbols("AAPL",src='yahoo')
getSymbols(AAPL,src='yahoo')
getSymbols("AAPL",src='yahoo')
rm(AAPL)
getSymbols("AAPL",src='yahoo')
summary(AAPL)
getSymbols("AAPL")
summary(AAPL)
rm(list=ls()
)
set.seed(1)
rpois(5,2)
rpois(5,2)
set.seed(1)
rpois(5,2)
rpois(5,2)
set.seed(10)
x <- rep(0:1, each=5)
e <- rnorm(10,0,20)
y <- 0.5 + 2 * x + e
plot(x,y)
setwd("~/Desktop/datasciencecoursera/R_Programming/Assignment_3")
data <- read.csv("data/outcome-of-care-measures.csv", colClasses = "character")
stateList <- data[,7]
as.factor(stateList)
stateList <- as.factor(data[,7])
levels(stateList)
levels(stateList)[1]
levels(stateList)[4]
states <- levels(stateList)
length(states)
rm(list=ls())
?data.frame
dataFrame <- data.frame
dataFrame <- data.frame()
names(dataFrame) <- c("hospital", "state")
dataFrame <- data.frame(repeat(0,100))
dataFrame <- data.frame(rep(0,100))
dataFrame <- data.frame(rep(0,54))
dataFrame <- data.frame(rep(4,54))
dataFrame <- data.frame(rep(NULL,54))
dataFrame <- data.frame(rep(0,54))
dataFrame <- data.frame(rep(NULL,54))
dataFrame <- data.frame(hospital=character(),state=character())
dataFrame
dataFrame[1,1] <- "Hospital"
dataFrame
dataFrame[1,1] <- "Hospital"
dataFrame[1,1] <- 2
nrows(dataFrame) <- 54
nrow(dataFrame) <- 54
nrow(dataFrame)
nrow(dataFrame) <- 54
dataFrame <- data.frame(hospital=character(),state=character())
rm(dataFrame)
dataFrame <- data.frame(hospital=character(),state=character())
dataFrame <- data.frame(hospital=character(),state=character(), stringsAsFactors = FALSE)
dataFrame <- data.frame(hospital=character(),state=character(), stringsAsFactors = FALSE)
dataFrame[1,1] <- 2
dataFrame[54,1] <- "Hospital"
dataFrame
dataFrame <- data.frame(hospital=character(),state=character(), stringsAsFactors = FALSE)
rm(dataFrame)
source("rankhospital.R")
rm(rankhospital)
source("rankall.R")
source("rankall.R")
rm(rankhospital)
head(rankall("heart attack", 20),10)
rankall("heart attack", 20)
source("rankall.R")
rankall("heart attack", 20)
rm(rankall)
data <- read.csv("data/outcome-of-care-measures.csv", colClasses = "character")
stateList <- data[,7]
factorList <- as.factor(data[,7])
states <- levels(factorList)
outcome <- "heart attack"
num <- 20
if(tolower(outcome) == "heart attack") {
outcome <- 11
} else if(tolower(outcome) == "heart failure") {
outcome <- 17
} else if(tolower(outcome) == "pneumonia") {
outcome <- 23
} else {
stop("invalid outcome")
}
dataFrame <- data.frame( hospital = character(), state = character(), stringsAsFactors = FALSE)
i <- 1
state <- states[i]
stateTrue <- data[(state==stateList),]
stateTrue[1,7]
stateTrue[17,7]
stateTrue[18,7]
stateTrue[100,7]
stateTrue[,outcome] <- as.numeric(stateTrue[,outcome])
outcomeValue <- stateTrue[,outcome]
noNA <- !is.na(outcomeValue)
stateTrue <- stateTrue[noNA,]
outcomeValue <- outcomeValue[noNA]
x <- as.numeric(nrow(stateTrue))
if(tolower(num) == "best") {
num <- 1
} else if(tolower(num) == "worst") {
num <- x
}
if(x < num) {
hospitalName <- NA
}
hospitals <- stateTrue[,2]
ii <- order(outcomeValue, hospitals)
ranking <- rbind(outcomeValue,hospitals)[,ii]
hospitalName <- ranking[[2,num]]
dataFrame[i,1] <- hospitalName
dataFrame[i,2] <- state
dataFrame
i <- 2
state <- states[i]
stateTrue <- data[(state==stateList),]
stateTrue[,outcome] <- as.numeric(stateTrue[,outcome])
outcomeValue <- stateTrue[,outcome]
noNA <- !is.na(outcomeValue)
stateTrue <- stateTrue[noNA,]
outcomeValue <- outcomeValue[noNA]
x <- as.numeric(nrow(stateTrue))
if(tolower(num) == "best") {
num <- 1
} else if(tolower(num) == "worst") {
num <- x
}
if(x < num) {
hospitalName <- NA
}
hospitals <- stateTrue[,2]
ii <- order(outcomeValue, hospitals)
ranking <- rbind(outcomeValue,hospitals)[,ii]
hospitalName <- ranking[[2,num]]
dataFrame[i,1] <- hospitalName
dataFrame[i,2] <- state
print(dataFrame)
length(states)
rm(list=ls())
source("rankall.R")
rankall("heart attack", 20)
hospitalRanks <- rankall("heart attack", 20)
row.names(hospitalRanks[1])
row.names(hospitalRanks[[1]])
row.names(hospitalRanks[1,])
row.names(hospitalRanks[1,]) <- "AK"
row.names(hospitalRanks[1,])
row.names(hospitalRanks[1,]) <- AK
row.names(hospitalRanks[1,]) <- "AK"
row.names(hospitalRanks[1,])
hospitalRanks
rm(list=ls())
source("rankall.R")
source("submitscript3.R")
submit()
source("rankall.R")
submit()
submit()
submit()
rankall("heart failure")
num <- "best"
if(tolower(num) == "best") {
num <- 1
} else if(tolower(num) == "worst") {
num <- x
}
x <- 100
num <- "worst"
if(tolower(num) == "best") {
num <- 1
} else if(tolower(num) == "worst") {
num <- x
}
rm(list=ls())
outcome <- "pneumonia"
num <- "worst"
data <- read.csv("data/outcome-of-care-measures.csv", colClasses = "character")
stateList <- data[,7]
factorList <- as.factor(data[,7])
states <- levels(factorList)
if(tolower(outcome) == "heart attack") {
outcome <- 11
} else if(tolower(outcome) == "heart failure") {
outcome <- 17
} else if(tolower(outcome) == "pneumonia") {
outcome <- 23
} else {
stop("invalid outcome")
}
dataFrame <- data.frame( hospital = character(), state = character(), stringsAsFactors = FALSE)
i <- 1
state <- states[i]
stateTrue <- data[(state==stateList),]
stateTrue[,outcome] <- as.numeric(stateTrue[,outcome])
outcomeValue <- stateTrue[,outcome]
noNA <- !is.na(outcomeValue)
stateTrue <- stateTrue[noNA,]
outcomeValue <- outcomeValue[noNA]
x <- as.numeric(nrow(stateTrue))
if(tolower(num) == "best") {
num <- 1
} else if(tolower(num) == "worst") {
num <- x
}
if(x < num) {
hospitalName <- NA
}
hospitals <- stateTrue[,2]
ii <- order(outcomeValue, hospitals)
ranking <- rbind(outcomeValue,hospitals)[,ii]
hospitalName <- ranking[[2,num]]
dataFrame[i,1] <- hospitalName
dataFrame[i,2] <- state
print(dataFrame)
i <- 54
state <- states[i]
stateTrue <- data[(state==stateList),]
stateTrue <- data[(state==stateList),]
stateTrue[,outcome] <- as.numeric(stateTrue[,outcome])
outcomeValue <- stateTrue[,outcome]
noNA <- !is.na(outcomeValue)
stateTrue <- stateTrue[noNA,]
outcomeValue <- outcomeValue[noNA]
x <- as.numeric(nrow(stateTrue))
num <- "worst"
if(tolower(num) == "best") {
num <- 1
} else if(tolower(num) == "worst") {
num <- x
}
if(x < num) {
hospitalName <- NA
}
hospitals <- stateTrue[,2]
ii <- order(outcomeValue, hospitals)
ranking <- rbind(outcomeValue,hospitals)[,ii]
hospitalName <- ranking[[2,num]]
dataFrame[i,1] <- hospitalName
dataFrame[i,2] <- state
print(dataFrame)
rm(list=ls())
source("rankall.R")
rankall("pneumonia", "worst")
rankall("heart failure")
rankall("heart failure",10)
rankall("heart attack",20)
rankall("heart attack",1)
rankall("heart attack",2)
rankall("heart attack",3)
rankall("pneumonia",2)
rm(rankall)
outcome <- "heart failure"
num <- "best"
i <- 12
data <- read.csv("data/outcome-of-care-measures.csv", colClasses = "character")
stateList <- data[,7]
factorList <- as.factor(data[,7])
states <- levels(factorList)
if(tolower(outcome) == "heart attack") {
outcome <- 11
} else if(tolower(outcome) == "heart failure") {
outcome <- 17
} else if(tolower(outcome) == "pneumonia") {
outcome <- 23
} else {
stop("invalid outcome")
}
dataFrame <- data.frame( hospital = character(), state = character(), stringsAsFactors = FALSE)
state <- states[i]
stateTrue[,outcome] <- as.numeric(stateTrue[,outcome])
stateTrue <- data[(state==stateList),]
stateTrue[,outcome] <- as.numeric(stateTrue[,outcome])
outcomeValue <- stateTrue[,outcome]
noNA <- !is.na(outcomeValue)
stateTrue <- stateTrue[noNA,]
outcomeValue <- outcomeValue[noNA]
x <- as.numeric(nrow(stateTrue))
if(tolower(num) == "best") {
y <- 1
} else if(tolower(num) == "worst") {
y <- x
} else {
y <- num
}
if(x < y) {
hospitalName <- NA
}
hospitals <- stateTrue[,2]
ii <- order(outcomeValue, hospitals)
ranking <- rbind(outcomeValue,hospitals)[,ii]
ranking <- rbind(outcomeValue,hospitals)[,ii]
if(x < y) {
hospitalName <- NA
} else if(x == 1){
## Get Hospital List
hospitals <- stateTrue[,2]
hospitalName <- hospitals
}
dataFrame[i,1] <- hospitalName
dataFrame[i,2] <- state
rm(list=ls())
source("rankall.R")
rankall("heart failure")
rankall("pneumonia", "worst")
source("submitscript3.R")
submit()
