file.copy("mytest2.R", "mytest3.R")
~/
file.path("mytest3.R")
dir.create("testdir2/testdir3")
dir.create("testdir2/testdir3", recursive=TRUE)
dir.delete("testdir2")
dir.create("testdir2/testdir3", recursive=TRUE)
unlink("testdir2", recursive=TRUE)
setwd("~/testdir")
setwd(old.dir)
unlink("testdir", recursive = T)
unlink("testdir", recursive = TRUE)
q
rm(list=ls())
ls()
list()
library()
library("swirl")
swirl()
getwd()
ls()
x <- 9
ls()
list.files()
q()
library("swirl")
swirl()
1:20
pi:20
pi:10
15:1
?`:`
seq(1,20)
seq(1,10,by=-.5)
seq(1,10,by=0.5)
seq(0,10,by=0.5)
seq(5,10,length=30)
my_seq <- seq(5,10,length=30)
my_seq
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0 , times=40)
rep(c(0,1,2) , times=10)
rep(c(0,1,2) , each=10)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_char <- c(my_char,"Allan")
my_name <- c(my_char,"Allan")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world", sep = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X","Y","Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
4
swirl()
x <- c(44,NA,5,NA)
x*3
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
library(swirl)
swirl()
my_vector <- 1:20
my_vectpr
my_vector
dim(my_vector)
length)my_vector
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
args(matrix)
my_matrix2 <- matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints <- sample(10)
ints
ints > 5
which(ints>7)
any(ints<0)
all(ints>0)
x <- c(1,3L,"a")
x <- (1,3L,"a")
x <- list(1,3L,"a")
x <- c(1,3L,"a")
as.list(x)
x
x <- list(1,3L,"a")
x
class(x[1])
class(x[2])
class(x[3])
x[3]
x[[3]
]
class(x[[3]])
class(x[[1]])
class(x[[2]])
class(x[[3]])
rm(x)
x <- c(69, 69, 65, 72, 50, 57, 58, 50, 56, 42)
mean(x)
sumary(x)
summary(x)
std()
sd()
?sd
sd(x)
mean(x) - sd(x)
library(datasets)
data(iris)
tapply(iris$Sepal.Length, iris$species, mean)
str(iris)
tapply(iris$Sepal.Length, iris$Species, mean)
rm(list=ls())
setwd("~/")
setwd("~/")
x <- c(39, 67, 74, 70, 43, 52, 68, 38, 64, 73)
summary(x)
sd(x)
sdp
psd
sd
count
str(x)
dim(x)
length(x)
sd(x) * sqrt((length(x)-1)/length(x))
message("a")
rm(list=ls())
library("swirl")
data()
library("datasets")
load("iris")
iris()
iris
x <- iris
x
rm(x)
install(RMongo)
install.packages("RMongo")
library("rJava")
rJava
library("RMongo")
?RMongo
?rJava
install.packages("quantmod")
library("quantmod")
getSymbol("AAPL")
getSymbols("AAPL")
AAPL
head("AAPL")
class("AAPL")
str("AAPL
")
barChart(AAPL)
AAPL[2]
tail(AAPL)
summary(AAPL)
as.list(APPL)
as.list(AAPL)
install.package("twitterR")
install.packages("twitterR")
install.packages("twitteR")
install.packages("twitteR")
rm(list=ls())
library("twiteeR")
library("twitteR")
library("RMongo")
?twitteR
install.packages("Quandl")
library("Quandl")
?Quandl
install.packages("rdatamarket")
install.packages("rga")
install.packages("RGA")
install.packages("RGoogleAnalytics")
install.packages("ganalytics")
library
?library
library()
rmongo()
RMongo()
install.packages("RMongo")
install.packages("RMongo")
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
load("iris")
?iris
iris <- iris
str(iris)
library("quantmod", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
getSymbols("AAPL")
str(AAPL)
head(AAPL)
getSymbols.yahoo
getSymbols.yahoo(AAPL)
getSymbols.yahoo("AAPL")
getSymbol("AAPL",src='yahoo')
getSymbols("AAPL",src='yahoo')
getSymbols(AAPL,src='yahoo')
getSymbols("AAPL",src='yahoo')
rm(AAPL)
getSymbols("AAPL",src='yahoo')
summary(AAPL)
getSymbols("AAPL")
summary(AAPL)
rm(list=ls()
)
set.seed(1)
rpois(5,2)
rpois(5,2)
set.seed(1)
rpois(5,2)
rpois(5,2)
set.seed(10)
x <- rep(0:1, each=5)
e <- rnorm(10,0,20)
y <- 0.5 + 2 * x + e
plot(x,y)
source("best.R")
setwd("~/Desktop/datasciencecoursera/R_Programming/Assignment_3")
source("best.R")
source("submitscript3.R")
submit()
submit()
rm(best)
stateTrue
stateTrue <- data.frame
stateTrue <- data.frame()
dim(stateTrue) <- c(100,46)
dims(stateTrue) <- c(100,46)
dim(stateTrue) <- c(0,46)
dim(stateTrue) <- list(2,1)
length(stateTrue) <- 100
dim(stateTrue) <- list(10,10)
stateTrue
as.data.frame(stateTrue)
stateTrue <- as.data.frame(stateTrue)
dim(stateTrue) <- list(10,100)
print(NA)
exit
stop
?stop
tolower(5)
tolower(BEST)
tolower("BEST")
tolower("worst")
x <- 100
num <- "best"
if(tolower(num) == "best") {
num <- 1
} else if(tolower(num) == "worst") {
num <- x
} else if(x < num) {
stop(call = FALSE)
print(NA)
}
x <- nrow(stateTrue)
if(tolower(num) == "best") {
num <- 1
} else if(tolower(num) == "worst") {
num <- x
} else if(x < num) {
stop(call = FALSE)
print(NA)
}
## Print num value
print(num)
num <- "worSt"
x <- nrow(stateTrue)
if(tolower(num) == "best") {
num <- 1
} else if(tolower(num) == "worst") {
num <- x
} else if(x < num) {
stop(call = FALSE)
print(NA)
}
## Print num value
print(num)
x <- 100
?c
?list
if(tolower(num) == "best") {
num <- 1
} else if(tolower(num) == "worst") {
num <- x
} else if(x < num) {
stop(call = FALSE)
print(NA)
}
## Print num value
print(num)
num <- "worSt"
if(tolower(num) == "best") {
num <- 1
} else if(tolower(num) == "worst") {
num <- x
} else if(x < num) {
stop(call = FALSE)
print(NA)
}
## Print num value
print(num)
num <- 150
if(tolower(num) == "best") {
num <- 1
} else if(tolower(num) == "worst") {
num <- x
} else if(x < num) {
stop(call = FALSE)
print(NA)
}
## Print num value
print(num)
if(tolower(num) == "best") {
num <- 1
} else if(tolower(num) == "worst") {
num <- x
} else if(x < num) {
stop(call = FALSE)
print(NA)
}
## Print num value
print(num)
if(tolower(num) == "best") {
num <- 1
} else if(tolower(num) == "worst") {
num <- x
} else if(x < num) {
stop()
print(NA)
}
if(tolower(num) == "best") {
num <- 1
} else if(tolower(num) == "worst") {
num <- x
} else if(x < num) {
print(NA)
stop()
}
rm(list=ls())
data <- read.csv("data/outcome-of-care-measures.csv", colClasses = "character")
state <- "tx"
outcome <- "Heart Failure"
num <- 4
stateList <- data[,7]
stateTrue <- data[(toupper(state)==stateList),]
if (nrow(stateTrue) == 0){
stop("invalid state")
}
if(tolower(outcome) == "heart attack") {
outcome <- 11
} else if(tolower(outcome) == "heart failure") {
outcome <- 17
} else if(tolower(outcome) == "pneumonia") {
outcome <- 23
} else {
stop("invalid outcome")
}
stateTrue[,outcome] <- as.numeric(stateTrue[,outcome])
outcomeValue <- stateTrue[,outcome]
noNA <- !is.na(outcomeValue)
stateTrue <- stateTrue[noNA,]
outcomeValue <- outcomeValue[noNA]
x <- nrow(stateTrue)
if(tolower(num) == "best") {
num <- 1
} else if(tolower(num) == "worst") {
num <- x
} else if(x < num) {
return(NA)
}
num <- "Worst"
x <- nrow(stateTrue)
if(tolower(num) == "best") {
num <- 1
} else if(tolower(num) == "worst") {
num <- x
} else if(x < num) {
return(NA)
}
x <- as.numeric(nrow(stateTrue))
if(tolower(num) == "best") {
num <- 1
} else if(tolower(num) == "worst") {
num <- x
} else if(x < num) {
return(NA)
}
num <- 300
x <- as.numeric(nrow(stateTrue))
if(tolower(num) == "best") {
num <- 1
} else if(tolower(num) == "worst") {
num <- x
} else if(x < num) {
return(NA)
}
if(tolower(num) == "best") {
num <- 1
} else if(tolower(num) == "worst") {
num <- x
} else if(x < num) {
print(NA)
}
num <- 4
if(tolower(num) == "best") {
num <- 1
} else if(tolower(num) == "worst") {
num <- x
} else if(x < num) {
print(NA)
}
outcomeValue
order(outcomeValue)
min(outcomeValue)
runif(1:10)
?runif
set.seed(!)
set.seed(1)
runif(10, 1, 10)
set.seed(1)
order(runif(10, 1, 10))
?order
hospitals <- stateTrue[,2]
ii <- order(outcomeValue, hospitals)
rbind(outcomeValue,hospitals)[,ii]
ranking <- rbind(outcomeValue,hospitals)[,ii]
head(ranking)
raking[1]
ranking[1]
ranking[2]
ranking[10]
ranking[9]
ranking['9]
ranking[,9]
ranking[,1]
ranking[,4]
ranking[2,4]
y <- ranking[2,4]
y
class(y)
ranking[3,4]
ranking[1,4]
ranking[1,3]
ranking[1,6]
ranking[1,5]
ranking[2,4]
y
y{1}
y[1]
y[[1]
]
ranking[[2,4]]
rm(list=ls())
source("rankhospital.R")
rankhospital("tx", "heart Failure", 4)
rankhospital("Md", "heart attacK", "worst")
source("rankhospital.R")
rankhospital("Md", "heart attacK", "worst")
rankhospital("Mn", "heart attacK", 5000)
source(submitscript3.R)
source("submitscript3.R")
submit()
submit()
submit()
submit()
