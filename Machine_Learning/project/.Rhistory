train <- read.csv(pml-training.csv)
train <- read.csv(file = "pml-training.csv")
test <- read.csv(file = "pml-testing.csv")
str(train)
train$classe
str(train)
train$classe
q()
train <- read.csv(file = "pml-training.csv", stringsAsFactors = FALSE)
test <- read.csv(file = "pml-testing.csv", stringsAsFactors = FALSE)
class(names(train))
sapply(train, class)
sapply(train, class) == sapply(test, class)
sapply(test, class)
sapply(train, class)
train[1,colSums(is.na(train)) < nrow(train)]
dim(train[1,colSums(is.na(train)) < nrow(train)])
dim(train[1,colSums(is.na(train)) > nrow(train)])
dim(train[1,colSums(is.na(train)) = nrow(train)])
dim(train[1,colSums(is.na(train)) == nrow(train)])
dim(train[1,colSums(is.na(train)) < nrow(train)])
train <- read.csv(file = "pml-training.csv", stringsAsFactors = FALSE, na.strings = c("NA", "NaN", " "))
dim(train[1,colSums(is.na(train)) < nrow(train)])
summary(train)
str(train)
train <- read.csv(file = "pml-training.csv", stringsAsFactors = FALSE, na.strings = c("NA", "NaN", "", " "))
str(train)
dim(train[1,colSums(is.na(train)) < (0.9* nrow(train)])
dim(train[1,colSums(is.na(train)) < (0.9* nrow(train)]))
dim(train[1,colSums(is.na(train)) < (0.9* nrow(train))])
dim(train[1,colSums(is.na(train)) < (0.75* nrow(train))])
dim(train[1,colSums(is.na(train)) < (0.95* nrow(train))])
dim(train[1,colSums(is.na(train)) < (0.98* nrow(train))])
dim(train[1,colSums(is.na(train)) < (0.96* nrow(train))])
dim(train[1,colSums(is.na(train)) < (0.50* nrow(train))])
dim(train[1,colSums(is.na(train)) < (0.25* nrow(train))])
dim(train[1,colSums(is.na(train)) < (0.10* nrow(train))])
dim(train[1,colSums(is.na(train)) < (0.01* nrow(train))])
dim(train[1,colSums(is.na(train)) < (0.001* nrow(train))])
dim(train[1,colSums(is.na(train)) < (0 * nrow(train))])
summary(train)
train$min_yaw_belt
is.na(train$min_yaw_belt)
sum(is.na(train$min_yaw_belt))
summary(train)
library(caret)
install.packages("caret")
library(rpart)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
install.packages("ElemStatLearn")
test <- read.csv(file = "pml-testing.csv", stringsAsFactors = FALSE)
train <- read.csv(file = "pml-training.csv", stringsAsFactors = FALSE)
names(train)
srt(train$classe)
str(train$classe)
summary(train$classe)
summary(as.factor(train$classe))
summary(as.factor(train$X))
summary(as.factor(train$user_name))
dim(train[1,colSums(is.na(train)) < (0.9* nrow(train)])
dim(train[1,colSums(is.na(train)) < (0.9* nrow(train))])
dim(train[1,colSums(is.na(train)) < (0.75* nrow(train))])
sum(is.na(train$min_yaw_belt))
dim(train[1,colSums(is.na(train)) < (0 * nrow(train))])
dim(train[1,colSums(is.na(train)) < (0.50* nrow(train))])
dim(train[1,colSums(is.na(train)) < (0.25* nrow(train))])
dim(train[1,colSums(is.na(train)) < (0.01* nrow(train))])
summary(train)
train <- read.csv(file = "pml-training.csv", stringsAsFactors = FALSE, na.strings = c("NA", "NaN", "", " "))
dim(train[1,colSums(is.na(train)) < (0.9* nrow(train))])
dim(train[1,colSums(is.na(train)) < (0.001* nrow(train))])
train <- read.csv(file = "pml-training.csv", stringsAsFactors = FALSE, na.strings = c("NA", "NaN", "", " "))
test <- read.csv(file = "pml-testing.csv", stringsAsFactors = FALSE, na.strings = c("NA", "NaN", "", " "))
str(train)
summary(train)
head(train$kurtosis_roll_belt)
tail(train$kurtosis_roll_belt)
sum(is.na(kurtosis_roll_belt))
sum(is.na(train$kurtosis_roll_belt))
tail(is.numeric(train$kurtosis_roll_belt))
tail(as.numeric(train$kurtosis_roll_belt))
sum(is.na(as.numeric(train$kurtosis_roll_belt)))
summary(as.numeric(train$kurtosis_roll_belt))
diff(is.na(as.numeric(train$kurtosis_roll_belt)),is.na(train$kurtosis_roll_belt)
)
is.na(as.numeric(train$kurtosis_roll_belt)) == is.na(train$kurtosis_roll_belt)
train$kurtosis_roll_belt[832]
train <- read.csv(file = "pml-training.csv", stringsAsFactors = FALSE, na.strings = c("NA", "NaN", "", " ", "#DIV/0!"))
test <- read.csv(file = "pml-testing.csv", stringsAsFactors = FALSE, na.strings = c("NA", "NaN", "", " ", "#DIV/0!"))
sum(is.na(as.numeric(train$kurtosis_roll_belt)))
dim(train[1,colSums(is.na(train))
dim(train[1,colSums(is.na(train)) < (0.9* nrow(train))])
dim(train[1,colSums(is.na(train)) < (0.75* nrow(train))])
dim(train[1,colSums(is.na(train)) < (0* nrow(train))])
dim(train[1,colSums(is.na(train)) < (100* nrow(train))])
dim(train[1,colSums(is.na(train)) < (0.10* nrow(train))])
dim(train[1,colSums(is.na(train)) < (0.95* nrow(train))])
dim(train[,colSums(is.na(train)) < (0.95* nrow(train))])
train.ss <- train[,colSums(is.na(train)) < (0.95* nrow(train))]
summary(train.ss)
train.ss <- train.ss[,-1:7]
train.ss <- train.ss[,-(1:7)]
summary(train.ss)
train.ss$classe <- as.factor(train.ss$classe)
summary(train.ss)
rm(list = ls())
library(caret)
library(rpart)
library(AppliedPredictiveModeling)
dataset <- read.csv(file = "pml-training.csv", stringsAsFactors = FALSE, na.strings = c("NA", "NaN", "", " ", "#DIV/0!"))
exam <- read.csv(file = "pml-testing.csv", stringsAsFactors = FALSE, na.strings = c("NA", "NaN", "", " ", "#DIV/0!"))
data.ss <- dataset[,colSums(is.na(dataset)) < (0.95* nrow(dataset))]
data.ss <- data.ss[,-(1:7)]
data.ss$classe <- as.factor(data.ss$classe)
colSums(is.na(dataset))
(0.95* nrow(dataset))
(0.98* nrow(dataset))
(0.97* nrow(dataset))
data.ss <- dataset[,colSums(is.na(dataset)) < (0.97* nrow(dataset))]
data.ss <- data.ss[,-(1:7)]
data.ss$classe <- as.factor(data.ss$classe)
colSums(is.na(dataset)) < (0.97* nrow(dataset))
colSums(is.na(dataset)) < (0.1* nrow(dataset))
colSums(is.na(dataset)) < (1* nrow(dataset))
sum(colSums(is.na(dataset)) < (1* nrow(dataset)))
sum(colSums(is.na(dataset)) < (0.97* nrow(dataset)))
sum(colSums(is.na(dataset)) < (0.98* nrow(dataset)))
sum(colSums(is.na(dataset)) < (0.99* nrow(dataset)))
sum(colSums(is.na(dataset)) < (0.05* nrow(dataset)))
sum(colSums(is.na(dataset)) < (0.01* nrow(dataset)))
sum(colSums(is.na(dataset)) < (0.0* nrow(dataset)))
sum(colSums(is.na(dataset)) < (0.01* nrow(dataset)))
sum(colSums(is.na(dataset)) <= (1* nrow(dataset)))
data.ss <- dataset[,colSums(is.na(dataset)) < (0.01* nrow(dataset))]
data.ss <- data.ss[,-(1:7)]
data.ss$classe <- as.factor(data.ss$classe)
inTrain <- createDataPartition(y = data.ss@classe, p = 0.6, list = FALSE)
data.ss <- dataset[,colSums(is.na(dataset)) < (0.01* nrow(dataset))]
data.ss <- data.ss[,-(1:7)]
data.ss$classe <- as.factor(data.ss$classe)
data.ss <- as.data.frame(data.ss)
inTrain <- createDataPartition(y = data.ss@classe, p = 0.6, list = FALSE)
dataset <- read.csv(file = "pml-training.csv", stringsAsFactors = FALSE, na.strings = c("NA", "NaN", "", " ", "#DIV/0!"))
data.ss <- dataset[,colSums(is.na(dataset)) < (0.01* nrow(dataset))]
data.ss <- data.ss[,-(1:7)]
data.ss$classe <- as.factor(data.ss$classe)
inTrain <- createDataPartition(y = data.ss$classe, p = 0.6, list = FALSE)
train <- data.ss[inTrain,]
test <- data.ss[-inTrain,]
library(caret)
library(rpart)
library(AppliedPredictiveModeling)
dataset <- read.csv(file = "pml-training.csv", stringsAsFactors = FALSE, na.strings = c("NA", "NaN", "", " ", "#DIV/0!"))
exam <- read.csv(file = "pml-testing.csv", stringsAsFactors = FALSE, na.strings = c("NA", "NaN", "", " ", "#DIV/0!"))
data.ss <- dataset[,colSums(is.na(dataset)) < (0.01* nrow(dataset))]
data.ss <- data.ss[,-(1:7)]
data.ss$classe <- as.factor(data.ss$classe)
cor(data.ss)
pairs(data.ss)
data(iris)
iris
names(data.ss)
rm(iris)
class(data.ss)
class(names(data.ss))
class(data.ss[,1])
sapply(data.ss, class)
data.ss$total_accel_belt
sapply(data.ss, class)
library(caret)
library(rpart)
library(AppliedPredictiveModeling)
dataset <- read.csv(file = "pml-training.csv", stringsAsFactors = FALSE, na.strings = c("NA", "NaN", "", " ", "#DIV/0!"))
exam <- read.csv(file = "pml-testing.csv", stringsAsFactors = FALSE, na.strings = c("NA", "NaN", "", " ", "#DIV/0!"))
data.ss <- dataset[,colSums(is.na(dataset)) < (0.01* nrow(dataset))]
rm(dataset)
data.ss <- data.ss[,-(1:7)]
data.ss$classe <- as.factor(data.ss$classe)
set.seed(33212)
train_control <- trainControl(method = "cv", number = 10, p = 0.7)
modelFit <- train(classe ~ . , data=data.ss, trControl = train_control, method = "rpart")
print(modelFit$finalModel)
modelFit
predictions <- predict(modelFit, data.ss[,1:52])
confusionMatrix(predictions, data.ss$classe)
