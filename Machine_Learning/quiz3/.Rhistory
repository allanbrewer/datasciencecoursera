install.packages(c("arm", "bit64", "caret", "codetools", "corpcor", "corrgram", "crayon", "curl", "e1071", "foreign", "gamlss", "gdata", "gee", "goftest", "gridExtra", "heplots", "intergraph", "KernSmooth", "kknn", "lattice", "logcondens", "logspline", "manipulate", "mapdata", "mapproj", "maps", "MASS", "Matrix", "mclust", "mix", "MuMIn", "nlme", "proxy", "R6", "raster", "RcppEigen", "registry", "rversions", "semTools", "seriation", "simsem", "sn", "survival", "TSP", "TTR", "vcd", "vcdExtra", "XML"))
library("AppliedPredictiveModeling", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("caret", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("ElemStatLearn")
library("ElemStatLearn", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("pgmm")
library("Amelia", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("pgmm", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("rpart", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
detach("package:Amelia", unload=TRUE)
data(ozone)
head(ozone)
rm(ozone)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain <- createDataPartition(y = segmentationOriginal$Case, p=0.7, list = FALSE)
set.seed(125)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
head(training)[,1:5]
rm(inTrain, testing, training)
names(segmentationOriginal)
hean(segmentationOriginal$Case)
head(segmentationOriginal$Case)
segmentationOriginal$Case == "Train"
which(segmentationOriginal$Case == "Train")
inTrain <- which(segmentationOriginal$Case == "Train")
training <- segmentationOriginal[inTrain, -(1:2)]
testing <- segmentationOriginal[-inTrain, -(1:2)]
set.seed(125)
head(training)[1:5,]
head(training)[,1:5]
str(training$Class)
modFit <- train(Class ~ ., data = training, method = "rpart")
set.seed(125)
modFit <- train(Class ~ ., data = training, method = "rpart")
install.packages("rattle")
library(rattle)
save.image()
library(rattle)
q()
library(AppliedPredictiveModeling)
library(caret)
library(rattle)
fancyRpartPlot(modFit$finalModel)
library(rpart)
fancyRpartPlot(modFit$finalModel)
library(rpart.plot)
install.packages('rpart.plot')
library(rpart.plot)
fancyRpartPlot(modFit$finalModel)
q()
library(pgmm)
data(olive)
head(olive)
olive = olive[,-1]
summary(olive)
library(caret)
modFit <- train(Area ~ . , method = "rpart", data = olive)
library(rpart)
modFit <- train(Area ~ . , method = "rpart", data = olive)
newdata = as.data.frame(t(colMeans(olive)))
rm(modFit)
modFit <- train(Area ~ . , method = "rpart", data = olive)
qplot(modFit$finalModel, uniform = TRUE)
library(rattle)
print(modFit$finalModel)
ls
ls()
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
head(trainSA)
?SAheartart
?SAheart
modFit <- train(cdh ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family = "binomial", data = "trainSA")
modFit <- train(cdh ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family = "binomial", data = trainSA)
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family = "binomial", data = trainSA)
summary(SAheart)
str(SAheart)
modFit <- train(I(as.factor(chd)) ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family = "binomial", data = trainSA)
set.seed(13234)
modFit <- train(I(as.factor(chd)) ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family = "binomial", data = trainSA)
rm(list = ls())
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modFit <- train(I(as.factor(chd)) ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family = "binomial", data = trainSA)
predtest <- predict(modFit, testing)
predtest <- predict(modFit, testSA)
predtrain <- predict(modFit, trainSA)
valuestest <- testSA$chd
valuestest <- as.factor(testSA$chd)
valuestrain <- as.factor(trainSA$chd)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(valuetest, predtest)
missClass(valuestest, predtest)
predtest <- as.numeric(predtest)
predtest <- as.numeric(predtrain)
valuestest <- testSA$chd
valuestrain <- trainSA$chd
predtest <- predict(modFit, testSA)
predtrain <- predict(modFit, trainSA)
predtrain
as.numeric(levels(predtrain))
as.numeric(levels(predtrain))[predtrain]
predtrain <- as.numeric(levels(predtrain))[predtrain]
predtest <- as.numeric(levels(predtest))[predtest]
missClass(valuestest, predtest)
missClass(valuestrain, predtrain)
rm(list = ls())
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train
vowel.test
vowel.test$y <- as.factor(vowel.test$y)
vowel.train$y <- as.factor(vowel.train$y)
set.seed(33833)
fitMod <- train(y ~ . , method = "rf", data = vowel.train)
?varlmp
library(caret)
??varlmp
varImp(modFit)
varImp(fitMod)
q()
