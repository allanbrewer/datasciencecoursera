install.packages(c("arm", "bit64", "caret", "codetools", "corpcor", "corrgram", "crayon", "curl", "e1071", "foreign", "gamlss", "gdata", "gee", "goftest", "gridExtra", "heplots", "intergraph", "KernSmooth", "kknn", "lattice", "logcondens", "logspline", "manipulate", "mapdata", "mapproj", "maps", "MASS", "Matrix", "mclust", "mix", "MuMIn", "nlme", "proxy", "R6", "raster", "RcppEigen", "registry", "rversions", "semTools", "seriation", "simsem", "sn", "survival", "TSP", "TTR", "vcd", "vcdExtra", "XML"))
library("AppliedPredictiveModeling", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("caret", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("ElemStatLearn")
library("ElemStatLearn", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("pgmm")
library("Amelia", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("pgmm", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("rpart", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
detach("package:Amelia", unload=TRUE)
data(ozone)
head(ozone)
rm(ozone)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain <- createDataPartition(y = segmentationOriginal$Case, p=0.7, list = FALSE)
set.seed(125)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
head(training)[,1:5]
rm(inTrain, testing, training)
names(segmentationOriginal)
hean(segmentationOriginal$Case)
head(segmentationOriginal$Case)
segmentationOriginal$Case == "Train"
which(segmentationOriginal$Case == "Train")
inTrain <- which(segmentationOriginal$Case == "Train")
training <- segmentationOriginal[inTrain, -(1:2)]
testing <- segmentationOriginal[-inTrain, -(1:2)]
set.seed(125)
head(training)[1:5,]
head(training)[,1:5]
str(training$Class)
modFit <- train(Class ~ ., data = training, method = "rpart")
set.seed(125)
modFit <- train(Class ~ ., data = training, method = "rpart")
install.packages("rattle")
library(rattle)
save.image()
library(rattle)
q()
library(AppliedPredictiveModeling)
library(caret)
library(rattle)
fancyRpartPlot(modFit$finalModel)
library(rpart)
fancyRpartPlot(modFit$finalModel)
library(rpart.plot)
install.packages('rpart.plot')
library(rpart.plot)
fancyRpartPlot(modFit$finalModel)
q()
