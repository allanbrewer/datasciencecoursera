install.packages("caret")
require(devtools)
install_github('rCharts', 'ramnathv')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='allanbrewer', token='EB14BB728F359F1BF09845EDA05D5F38', secret='wTKw5vSOXKsCm16wMW5ZnbkihvLCmr293K1ew3rH')
install_github("ropensci/plotly")
library(plotly)
set_credentials_file("allanbrewer", "3pfqh6ckda")
save.image()
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
rm(adData, predictors, testing, trainIndex, training)
rm(diagnosis)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(testing$Superplasticizer)
hist(log(testing$Superplasticizer))
log(0)
min(testing$Superplasticizer)
summary(testing)
rm(list=ls())
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
summary(training)
rm(list=ls())
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
summary(training)
rm(list=ls())
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
summary(training)
names(training)
grep(pattern = "*IL", names(training))
grep(pattern = "^IL", names(training))
training[1,grep(pattern = "^IL", names(training))]
train.ss <- training[,grep(pattern = "^IL", names(training))]
preObj <- preProcess(train.ss, method = c("center", "sacele"))
preObj <- preProcess(train.ss, method = c("center", "scale"))
preObj
rm(preObj)
ls()
sum(complete.cases(train.ss))
sum(!complete.cases(train.ss))
?preProcess
q()
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
M <- abs(cor(train.ss))
diag(M) <- 0
which(M > 0.8, arr.ind = T)
which(M > 0.5, arr.ind = T)
which(M > 0.6, arr.ind = T)
which(M > 0.7, arr.ind = T)
plot(train.ss[,3],train.ss[,6])
which(M > 0.8, arr.ind = T)
M
rm(m)
rm(M)
diagnosis
head(adData)
head(train.ss)
head(training)
rm(train.ss)
grep("ÃŽL",names(training))
grep("IL",names(training))
grep("^IL",names(training))
c(1, grep("^IL",names(training)))
grep("^IL",names(training))
training[,grep("^IL",names(training))]
train.ss <- training[,grep("^IL",names(training))]
preObj <- preProcess(train.ss,method="pca")
preObj <- preProcess(train.ss,method="pca", pcaComp = 12)
preObj$std
preObj
preObj <- preProcess(train.ss,method="pca", pcaComp = 10)
preObj
preObj$std
?preProcess
preObj <- preProcess(train.ss,method="pca", std = 0.8)
preObj
preObj <- preProcess(train.ss,method="pca")
preObj
preObj <- preProcess(train.ss,method="pca", thresh = 0.8)
preObj
rm(list = ls())
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
train.ss <- training[,c(1, grep("^IL",names(training)))]
preObj <- preProcess(train.ss,method="pca", thresh = 0.8)
preObj <- preProcess(train.ss[,-1],method="pca", thresh = 0.8)
preObj
trainPCA <- predict(preObj, train.ss)
trainPCA <- predict(preObj, train.ss[,-1])
View(train.ss)
modelFitPCA <- train(train.ss$diagnosis ~ . , method = "glm", data=trainPCA)
confusionMatrix(testing$diagnosis,predict(modelFitPCA,testing))
test.ss <- testing[, grep("^IL",names(training))]
testPCA <- predict(preObj, test.ss)
confusionMatrix(testing$diagnosis,predict(modelFitPCA,testPCA))
modelFit <- train(diagnosis ~ . , method = "glm", data=train.ss)
confusionMatrix(testing$diagnosis,predict(modelFit,test.ss))
q()
