library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
name(vowel.train)
names(vowel.train)
vowel.test$y
vowel.test$y <- as.factor(vowel.test$y)
vowel.train$y <- as.factor(vowel.train$y)
set.seed(33833)
mod1 <- train(y ~ . , data = vowel.train, method = "rf")
library(caret)
library("randomForest", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
mod1 <- train(y ~ . , data = vowel.train, method = "rf")
mod1 <- train(y ~ . , data = vowel.train, method = "rf")
mod1 <- train(y ~ . , data = vowel.train, method = "gbm")
mod2 <- train(y ~ . , data = vowel.train, method = "gbm")
pred1 <- predict(mod1, vowel.test)
pred2 <- predict(mod2, vowel.test)
confusionMatrix(pred1, vowel.test$y)
confusionMatrix(pred2, vowel.test$y)
set.seed(33833)
mod1 <- train(y ~ . , data = vowel.train, method = "rf")
mod2 <- train(y ~ . , data = vowel.train, method = "gbm")
pred1 <- predict(mod1, vowel.test)
pred2 <- predict(mod2, vowel.test)
confusionMatrix(pred1, vowel.test$y)
confusionMatrix(pred2, vowel.test$y)
pred1 == pred2
which(pred1 == pred2)
pred1[,which(pred1 == pred2)]
pred1[which(pred1 == pred2),]
pred1[1,]
pred1[1]
pred1[which(pred1 == pred2)]
pred1[which(pred1 == pred2)] == vowel.test[which(pred1==pred2)]
pred1[which(pred1 == pred2)] == vowel.test[which(pred1==pred2),1]
sum(pred1[which(pred1 == pred2)] == vowel.test[which(pred1==pred2),1])
202/462
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
rm(vowel.test, vowel.train)
set.seed(62433)
mod1 <- train(diagnosis ~ . , data = training, method = "rf")
mod2 <- train(diagnosis ~ . , data = training, method = "gbm")
mod3 <- train(diagnosis ~ . , data = training, method = "lda")
mod3
pred1 <- predict(mod1, testing[-diagnosis,])
pred1 <- predict(mod1, testing)
pred2 <- predict(mod2, testing)
pred3 <- predict(mod3, testing)
confusionMatrix(pred1, testing$diagnosis)
confusionMatrix(pred2, testing$diagnosis)
confusionMatrix(pred3, testing$diagnosis)
predDF <- data.frame(pred1,pred2,pred3,wage=testing$wage)
predDF <- data.frame(pred1,pred2,pred3,diagnosis=testing$diagnosis)
combMod <- train(diagnosis ~ . , method = "rf", data = predDF)
combPred <- prediction(combMod, predDF)
combPred <- predict(combMod, predDF)
confusionMatrix(combPred, testing$diagnosis)
?plot.enet
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
?plot.enet
set.seed(233)
mod <- train(CompressiveStrength ~ . , method = "lasso", data = concrete)
set.seed(233)
mod <- train(CompressiveStrength ~ . , method = "lasso", data = concrete)
?plot.enet
plot.enet(mod)
mod
names(concrete)
?enet
save.image()
obj <- enet(concrete[,-9], concrete$CompressionStregth, lambda = 0)
concrete[,-9]
set.seed(233)
obj <- enet(concrete[,-9], concrete$CompressionStregth, lambda = 0)
x <- as.matrix(concrete[,-9])
obj <- enet(x, concrete$CompressionStregth, lambda = 0)
rm(x)
class(concrete$CompressiveStrength)
mean(concrete$CompressiveStrength)
mean.default(concrete$CompressiveStrength)
obj <- enet(as.matrix(concrete[,-9]), concrete$CompressiveStregth, lambda = 0)
obj <- enet(as.matrix(concrete[,-9]), concrete$CompressiveStrength, lambda = 0)
set.seed(233)
obj <- enet(as.matrix(concrete[,-9]), concrete$CompressiveStrength, lambda = 0)
set.seed(233)
mod <- train(CompressiveStrength ~ . , method = "lasso", data = concrete)
plot(obj, xvar = "penalty")
plot(obj, xvar = "step")
plot(obj, xvar = "penalty")
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
install.packages("forecast")
library(forecast)
install.packages("forecast")
install.packages("quadprog")
library(forecast)
?bast
?bats
fit <- bats(tstrain)
plot(forecast(fit))
fit
forecast(fit)
testing$visitsTumblr
testing
training
forecast(fit)
?forecast
forecast(fit, h = 235)
forecast(fit, h = 235, level = 0.95)
forecast(fit, h = 235, level = 95)
fore <- forecast(fit, h = 235, level = 95)
accuracy(fore, testing$visitsTumblr)
low <- fore$lower
high <- fore$upper
tail(flow)
tail(low)
testing$visit < low
sum(testing$visit < low)
sum(testing$visit > high)
9/235
900/235
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
install.packages(e1071)
install.packages("e1071")
save.image()
install.packages("e1071")
install.packages("e1071")
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(caret)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(e1071)
set.seed(325)
?e1071
